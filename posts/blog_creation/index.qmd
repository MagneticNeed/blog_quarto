---
title: "QuartoとGitHub Pagesで、メモを書くように自作ブログを作れた話"
author: "雨針 謡"
date: "2023-12-09"
categories: 
    - quarto
    - github
image: "kyoikuto.JPG"
---
# TL;DR
[投稿1](../post1/index.qmd)でブログを開設した際の技術的詳細について

# はじめに
QuartoでrenderしたhtmlをGitHub Pagesでホストしました。主に2つのターゲット層があり、1つはQuartoは使ったことがあるがhtmlファイルを作るのに使ったことがない人や、GitHub Pagesで自動的にホストする手順を知らない人達。もう1つはそもそもQuartoを使ったことがない人やノーコードのblogフレームワークでblogを書くのにちょっと飽きた、違うことをしてみたいという人たちです。嘘です。備忘録なので割と行間が大きいです。

人生で一度は自分のブログをNoteやはてなブログに頼らず書いてみたくないですか？私は書いてみたかったので、そうしました。

以下のパートで、QuartoとGitHub Pagesの2つについて個別に説明していきます。

# 具体的な技術について
## Quarto
### Quartoとは？
まず、Quartoについて。Quartoというのはオープンソース科学/技術出版システムの一つで、qmd形式という一種のMarkdown形式で記述したテキストをpdfやhtmlなど、さまざまな形式に変換するシステムになっています。

そもそもMarkdown形式とは何か？ということについては、[wikipedia](https://ja.wikipedia.org/wiki/Markdown)を参照してください。Markdown形式を使うと、適切なエディタやサーバー（NotionとかObsidianなどが有名でしょう、ある友人はTyporaというやつを推しています。他にも、mediawikiなんかに使われています。）のサポートを受けて、簡単に見出しや太字、斜体付きのメモを取ることができます。もちろんWordでも見出しや太字、斜体付きのメモは取れますが、いちいち文字列を選択してctrl+Bとかctrl+Iとかやるのはある観点からは面倒です。

### うれしさ
Quartoのうれしさというのは、主に2つある気がしています。

1つは、Markdown記法に共通のうれしさです。備忘録や講義ノートとして雑に書いたメモをそのままレポートやweb記事に転用できたら嬉しいですよね？僕は嬉しいです。正直、web記事を書くだけならQiita等を使えばいい話ではあるので、同じ記法で種々の媒体に載せることができるというのがメリットの一つかなと思っています。
例えば、LaTeXを使うと非常に綺麗な数式入りのレポートを執筆することができますが、これをそのままwebに転用することは困難です（KaTeXとかあるけど）。一方、Markdown記法を駆使してQiitaで手早く技術系の記事を仕上げることはできますが、同じやり方でレポートを書くことはできません。

2つ目はQuartoに固有の特徴故のもので、様々なプログラミング言語を内部で処理できるということです。具体的には、PythonやJulia、R、Javascriptなどです（恐らくメインのユーザーはPython使いだが、歴史的経緯的にはRが先頭に来る）。PythonとQuartoを組み合わせた使用例としては[これ](https://qiita.com/Nobukuni-Hyakutake/items/112a7bd5b34abd446395)を読むとよいです。

### 導入について
一つ一つ説明していきたいのですが、かなり[公式のdocument](https://quarto.org/)と[友人2の記事](https://qiita.com/Sangen_u/items/ff7ee6ec1ef2c13f8f99)が充実しているので、これで説明に代えます。


## GitHub Pages
一般的な概要は[GitHub公式のdocument](https://docs.github.com/ja/pages/getting-started-with-github-pages/about-github-pages)、Quartoとの連携については[Quarto公式のdocument](https://quarto.org/docs/publishing/github-pages.html)にまとまっていて、これを読めば全てわかるように書かれてあるのですが、簡約版を記載しておきます。

### GitHub Pagesとは
GitHub Pagesというのは、GitHub上のレポジトリに置いたhtml, css, Javascriptといったコードを認識して、これらのコードを元にGitHub側で自動的にwebページをホストしてくれる機能のことです。本来、webページを作るためにはドメインを取得して（.comや.jpといった有料ドメインならお名前.comで定期購入するとか）、サーバー（これもリモートの月額いくらのものがあったり、自宅に設置したりする）を押さえて......といった、コーディングとは別次元の面倒な作業が必要とされます（し、こういった手続きに慣れておくのも悪くはありません）が、こういった面倒さから解放されるための手段の一つがGitHub Pagesというわけです。因みに、同種のツールとしてNetlifyが挙げられます。Netlifyで書かれたwebアプリの例としては、[Genochemy](https://genochemy.netlify.app/)があります。

### Quartoとの連携
作成したQuartoの新規プロジェクトのディレクトリをGitHubに同期します。以下は、VScodeでQuartoの新規プロジェクトを作った直後からの作業を想定しています。

1. 対応するGitHubレポジトリを作成する。
作りましょう。

2. 作成したレポジトリと手元のコードを紐付ける。
以下をshellに入れます。ここまでは、GitHub Pagesではなく、GitHub全般に共通する作業です。
```zsh
$ git init
$ git remote add origin https://github.com/OWNER/REPOSITORY.git
```

3. 続いて、renderしてからGitHubにpushします。
```zsh
$ quarto render
$ git push
```
4. 最後に、GitHubレポジトリのSettings/Codes and automation/Pagesという階層にGitHub Pages siteをビルトするブランチとディレクトリを指定する場所があるので、main branchの/docsディレクトリを選択します。これにより、以降手元環境からmain branchにcommitするごとにブログの内容が手元環境を反映したものになります。

::: {.callout-note collapse="true"}
ディレクトリ構造は以下のようになっている。`/posts`ディレクトリで作られたindex.qmdファイルが`/docs`ディレクトリ内のindex.htmlファイルにrenderされている。このため、GitHub Pagesでは`/docs`ディレクトリをビルドディレクトリに指定した。
```default
.
├── _freeze
├── _quarto.yml
├── blog.qmd
├── docs
│   ├── about.html
│   ├── blog.html
│   ├── index.html
│   ├── listings.json
│   ├── posts
│   │   ├── blog_tech
│   │   │   ├── index.html
│   │   │   └── kyoikuto.JPG
│   │   ├── post1
│   │   │   ├── index.html
│   │   │   └── kyoikuto.JPG
│   ├── profile.jpg
│   ├── search.json
│   ├── site_libs
├── index.qmd
├── posts
│   ├── _metadata.yml
│   ├── blog_tech
│   │   ├── index.qmd
│   │   └── kyoikuto.JPG
│   ├── post1
│   │   ├── index.qmd
│   │   ├── kyoikuto.JPG
│   │   └── thumbnail.jpg
├── profile.jpg
└── styles.css
```
:::

# 最後に
何かツッコミどころ等ありましたら（あると思うので）ツッコんでください。